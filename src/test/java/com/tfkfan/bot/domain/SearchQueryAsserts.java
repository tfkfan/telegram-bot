package com.tfkfan.bot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SearchQueryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchQueryAllPropertiesEquals(SearchQuery expected, SearchQuery actual) {
        assertSearchQueryAutoGeneratedPropertiesEquals(expected, actual);
        assertSearchQueryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchQueryAllUpdatablePropertiesEquals(SearchQuery expected, SearchQuery actual) {
        assertSearchQueryUpdatableFieldsEquals(expected, actual);
        assertSearchQueryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchQueryAutoGeneratedPropertiesEquals(SearchQuery expected, SearchQuery actual) {
        assertThat(expected)
            .as("Verify SearchQuery auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchQueryUpdatableFieldsEquals(SearchQuery expected, SearchQuery actual) {
        assertThat(expected)
            .as("Verify SearchQuery relevant properties")
            .satisfies(e -> assertThat(e.value).as("check value").isEqualTo(actual.value))
            .satisfies(e -> assertThat(e.active).as("check active").isEqualTo(actual.active))
            .satisfies(e -> assertThat(e.minPrice).as("check minPrice").isEqualTo(actual.minPrice))
            .satisfies(e -> assertThat(e.maxPrice).as("check maxPrice").isEqualTo(actual.maxPrice));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchQueryUpdatableRelationshipsEquals(SearchQuery expected, SearchQuery actual) {}
}
